philippadrian@ph101pp contract % npm run deploy-goerli

> deploy-goerli
> npm run test && npx hardhat run scripts/deploy.ts --network goerli


> test
> npx hardhat test

ITERATIONS 100


  Gas costs ERC1155 vs ERC1155MintRange vs ERC1155MintRangeUpdateable vs Ph101ppDailyPhoto
    - updateInitialHolders() vs transferBatch()
    - mint() transfer() burn()
    - mintBatch() transferBatch() burnBatch()
    - pause() unpause()
    - mintRange() transfer() transfer()

  ERC1155MintRange
    getRangeMintInput
      ✔ Should return correctly formatted input params (3437ms)
      ✔ Should return correctly formatted input params for 0 tokens (78ms)
      ✔ Should return correctly formatted input params with consecutive ids when called after mintRange (539ms)
      ✔ Should correctly skip manually minted ids (_mint | _mintBatch) (641ms)
    mintRange
      ✔ Should mint 100 nfts to 4 initial holders and emit 4 TransferBatch events (3974ms)
      ✔ should correcly allocate dynamic balances when calling mintRange (964ms)
      ✔ should be possible to increase supply of dynamically minted tokens (_mintRange) via _mint|_mintBatch (194ms)
      ✔ mintRangeSafe Should fail when a token was minted since getMintRangeInput was called (100ms)
      ✔ mintRangeSafe Should fail when a batch of tokens was minted since getMintRangeInput was called (123ms)
      ✔ mintRangeSafe should fail when initial holders were updated since getMintRangeInput was called (103ms)
      ✔ mintRangeSafe should fail when another mintRange was executed since getMintRangeInput was called (131ms)
    safeTransfer(Batch)
      ✔ should transfer existing tokens that are minted with mintRange (504ms)
      ✔ should batch transfer existing tokens that are minted with mintRange (510ms)
    initialHolders
      ✔ Should fail to set initial holders to address(0) or same address (43ms)
      ✔ Should correctly update initial holders with setInitialHolders (331ms)
      ✔ Should return current initial holders when called with tokenID > number tokens minted (313ms)
      ✔ Should return initial holders for tokenId (also after they where updated) (741ms)
      ✔ Should not be possible to set initial holders that where token holders (199ms)
    totalSupply
      ✔ should correcly track totalSupply for dynamic balances minted with mintRange (470ms)
      ✔ should correcly track totalSupply for manually mints with _mint & _mintBatch  (528ms)
      ✔ should correcly track totalSupply when supply is added to dynamic balances  (1023ms)
      ✔ should correcly track totalSupply when supply is removed / burned  (531ms)

  ERC1155MintRangePausable
    getRangeMintInput
      ✔ Should return correctly formatted input params (177ms)
      ✔ Should return correctly formatted input params for 0 tokens
      ✔ Should return correctly formatted input params with consecutive ids when called after mintRange (350ms)
      ✔ Should correctly skip manually minted ids (_mint | _mintBatch) (499ms)
    mintRange
      ✔ Should mint 100 nfts to 4 initial holders and emit 4 TransferBatch events (4033ms)
      ✔ should correcly allocate dynamic balances when calling mintRange (924ms)
      ✔ should be possible to increase supply of dynamically minted tokens (_mintRange) via _mint|_mintBatch (184ms)
      ✔ mintRangeSafe Should fail when a token was minted since getMintRangeInput was called (80ms)
      ✔ mintRangeSafe Should fail when a batch of tokens was minted since getMintRangeInput was called (89ms)
      ✔ mintRangeSafe should fail when initial holders were updated since getMintRangeInput was called (74ms)
      ✔ mintRangeSafe should fail when another mintRange was executed since getMintRangeInput was called (125ms)
    safeTransfer(Batch)
      ✔ should transfer existing tokens that are minted with mintRange (524ms)
      ✔ should batch transfer existing tokens that are minted with mintRange (494ms)
    initialHolders
      ✔ Should fail to set initial holders to address(0) or same address (43ms)
      ✔ Should correctly update initial holders with setInitialHolders (178ms)
      ✔ Should return current initial holders when called with tokenID > number tokens minted (236ms)
      ✔ Should return initial holders for tokenId (also after they where updated) (478ms)
      ✔ Should not be possible to set initial holders that where token holders (169ms)
    totalSupply
      ✔ should correcly track totalSupply for dynamic balances minted with mintRange (449ms)
      ✔ should correcly track totalSupply for manually mints with _mint & _mintBatch  (283ms)
      ✔ should correcly track totalSupply when supply is added to dynamic balances  (948ms)
      ✔ should correcly track totalSupply when supply is removed / burned  (515ms)
    Pausable (when paused)
      ✔ should fail to mintRange() (412ms)
      ✔ should fail to setInitialHolders()
      ✔ should fail to mint()
      ✔ should fail to mintBatch()
      ✔ should fail to burn()
      ✔ should fail to transfer()
      ✔ should fail to transferBatch() (59ms)

  TestERC1155MintRangeUpdateable
    getRangeMintInput
      ✔ Should return correctly formatted input params (183ms)
      ✔ Should return correctly formatted input params for 0 tokens
      ✔ Should return correctly formatted input params with consecutive ids when called after mintRange (441ms)
      ✔ Should correctly skip manually minted ids (_mint | _mintBatch) (549ms)
    mintRange
      ✔ Should mint 100 nfts to 4 initial holders and emit 4 TransferBatch events (4498ms)
      ✔ should correcly allocate dynamic balances when calling mintRange (1183ms)
      ✔ should be possible to increase supply of dynamically minted tokens (_mintRange) via _mint|_mintBatch (171ms)
      ✔ mintRangeSafe Should fail when a token was minted since getMintRangeInput was called (88ms)
      ✔ mintRangeSafe Should fail when a batch of tokens was minted since getMintRangeInput was called (94ms)
      ✔ mintRangeSafe should fail when initial holders were updated since getMintRangeInput was called (71ms)
      ✔ mintRangeSafe should fail when another mintRange was executed since getMintRangeInput was called (109ms)
    safeTransfer(Batch)
      ✔ should transfer existing tokens that are minted with mintRange (497ms)
      ✔ should batch transfer existing tokens that are minted with mintRange (517ms)
    initialHolders
      ✔ Should fail to set initial holders to address(0) or same address
      ✔ Should correctly update initial holders with setInitialHolders (190ms)
      ✔ Should return current initial holders when called with tokenID > number tokens minted (285ms)
      ✔ Should return initial holders for tokenId (also after they where updated) (573ms)
      ✔ Should not be possible to set initial holders that where token holders (209ms)
    totalSupply
      ✔ should correcly track totalSupply for dynamic balances minted with mintRange (513ms)
      ✔ should correcly track totalSupply for manually mints with _mint & _mintBatch  (328ms)
      ✔ should correcly track totalSupply when supply is added to dynamic balances  (1087ms)
      ✔ should correcly track totalSupply when supply is removed / burned  (542ms)
    Pausable (when paused)
      ✔ should fail to mintRange() (244ms)
      ✔ should fail to setInitialHolders()
      ✔ should fail to mint()
      ✔ should fail to mintBatch()
      ✔ should fail to burn()
      ✔ should fail to transfer() (43ms)
      ✔ should fail to transferBatch()
    updateInitialHoldersInputSafe / _getUpdateInitialHoldersInputSafe / verifyUpdateInitialHoldersInput
      ✔ should fail when getting bad input or not paused (7506ms)
      ✔ should skip manuallyMinted tokens && reinitialize initializedBalances (638ms)
      ✔ should correcly update initialHolders of a simple range (486ms)
      ✔ should correcly update initialHolders across multiple ranges (570ms)
      ✔ should fail to create update initialHolders input when new holder is address(0) (389ms)
    updateInitialHolders non-safe must not affect any minted / transferred tokens when updating initialHolders
      ✔ should successfully change holders in various ways and revert everything (13051ms)
      ✔ should fail when getting bad input or not paused (4699ms)
      ✔ should not be possible to affect balances or supply when updating initialHolders (6924ms)
      ✔ should correctly transfer initialHolders when there were transfers (965ms)
      ✔ should correctly transfer initialHolders when there are manual mints without affecting supply (976ms)
      ✔ should correctly swap two initialHolders (5609ms)
    Lock initial holders
      ✔ should fail to lock initial holders of unminted tokens or if tokens are already locked (151ms)
      ✔ should fail to lock initial holders when paused (130ms)
      ✔ should fail to create update initialHolders input of locked range (886ms)

  Ph101ppDailyPhoto
    Interface
      ✔ It should support interfaces ERC1155, ERC2981, ERC165 (241ms)
    URI storing / updating
      ✔ Should set the correct mutableUri and immutableUri during deploy
      ✔ Should correcly update mutableUri via setProxyBaseUri()
      ✔ Should correcly update immutableUri via setPermanentBaseUriUpTo() and permanentBaseUriRanges + uriHistory to reflect this. (2046ms)
      ✔ Should require new permanentUri via setPermanentBaseUriUpTo() to be valid for more tokenIds than the last one and less than last minted one. (1824ms)
    tokenID <> date conversion
      ✔ should correcty convert date string <> token ID (136ms)
      ✔ should fail to translate date before Sept 1, 2022 to tokenId
      ✔ should fail to translate date if invalid date (incl leap years)
    URI() for tokenIDs
      ✔ should return correct url for unminted tokenId:1 
      ✔ should return correct url for tokenId:0 (CLAIM) 
      ✔ should return immutable url for all minted nfts  (1833ms)
      ✔ should return mutable url for minted nfts after _uriValidUptoTokenId (1457ms)
    Periods & uriHistory
      ✔ should return correctly set Init period
      ✔ Should correctly set Periods with setPeriod (183ms)
    Initial Supply 
      ✔ should fail to set max initial supply when paused
      ✔ should fail to set initial supply with incorrect inputs
      - Should invalidate mintRangeInput when maxInitialSupply is set
      ✔ Should correctly update initial supply via setInitialSupply (325ms)
      ✔ Should correctly update initial supply with setInitialHolders 2 (215ms)
      ✔ Should distribute tokens evenly within min/max supply range (16146ms)
    Mint Photos
      ✔ should fail to mint <= 0 tokens (136ms)
      ✔ should mint 1 vault and up to max supply to treasury  (23425ms)
    Claim tokens
      ✔ should mint 10 claim tokens to treasury wallet 
      ✔ should mint claim tokens to any wallet  (88ms)
      ✔ should claim mints from treasury and burn claims when redeemClaims is called (469ms)
      ✔ should claim mint from treasury and burn claim when redeemClaim is called (372ms)
    Update initial holders / getPh101ppDailyPhotoUpdateInitialHoldersInput
      ✔ should correcly update vault address only (1026ms)
      ✔ should correcly update treasury address only (1222ms)
      ✔ should correcly swap treasury and vault addresses (1871ms)
      ✔ should fail to updated initialHolders if isInitialHoldersRangeUpdatePermanentlyDisabled (801ms)
    ERC2981 Token Royalties
      ✔ should set default royalties during deploy
      ✔ should be able to set new default royalties (41ms)
      ✔ should be able to set and reset royalties for single token (66ms)
    Ownable / Ownable
      ✔ should fail to execute access guarded functions without role (187ms)
      ✔ should execute access guarded functions with special role (225ms)
      ✔ should fail execute non-view functions when paused (172ms)
      ✔ should be possible to update owner via setOwner
    Operator Filter Registry
      ✔ should correctly register contract with Operator Filter Registry and subscribe to opensea (41ms)
      ✔ should prevent filtered operator to transfer tokens (+ disable / disablePermanently) (387ms)
    Transfer Listener
      ✔ should correcly set transfer listener via setTransferListenerAddress
      ✔ should fail to set transfer listener via setTransferListenerAddress when frozen
      ✔ should emit Ph101ppDailyPhotoTransferReceived from Listener on transfer (300ms)

  Ph101ppDailyPhotoUtils
    ✔ Should correcly parse date test cases  (128ms)


  136 passing (2m)
  6 pending

deployed: Ph101ppDailyPhoto 0x2f084edfc16573117b8cbFC01e1206CfAe5589Ac
philippadrian@ph101pp contract % npm run interact-goerli

> interact-goerli
> npx hardhat run scripts/interact.ts --network goerli

philippadrian@ph101pp contract % npm run interact-goerli

> interact-goerli
> npx hardhat run scripts/interact.ts --network goerli

{
  to: '0x2f084edfc16573117b8cbFC01e1206CfAe5589Ac',
  from: '0x668EC8c20fc5de4aE0a5347801cbC19c6c234563',
  contractAddress: null,
  transactionIndex: 2,
  gasUsed: BigNumber { value: "372208" },
  logsBloom: '0x
  blockHash: '0x64902e4082e3f986f1fe2250e2d1466e1491402c700f62742984951a972d56da',
  transactionHash: '0x78e47fed51814063822e86d1aeac174dc40f8e62dca05db1b34578de20fb6a06',
  logs: [
    {
      transactionIndex: 2,
      blockNumber: 8234066,
      transactionHash: '0x78e47fed51814063822e86d1aeac174dc40f8e62dca05db1b34578de20fb6a06',
      address: '0x2f084edfc16573117b8cbFC01e1206CfAe5589Ac',
      topics: [Array],
      data: 'more characters,
      logIndex: 1,
      blockHash: '0x64902e4082e3f986f1fe2250e2d1466e1491402c700f62742984951a972d56da'
    },
    {
      transactionIndex: 2,
      blockNumber: 8234066,
      transactionHash: '0x78e47fed51814063822e86d1aeac174dc40f8e62dca05db1b34578de20fb6a06',
      address: '0x2f084edfc16573117b8cbFC01e1206CfAe5589Ac',
      topics: [Array],
      data: 'more characters,
      logIndex: 2,
      blockHash: '0x64902e4082e3f986f1fe2250e2d1466e1491402c700f62742984951a972d56da'
    }
  ],
  blockNumber: 8234066,
  confirmations: 1,
  cumulativeGasUsed: BigNumber { value: "550804" },
  effectiveGasPrice: BigNumber { value: "5000000000" },
  status: 1,
  type: 0,
  byzantium: true,
  events: [
    {
      transactionIndex: 2,
      blockNumber: 8234066,
      transactionHash: '0x78e47fed51814063822e86d1aeac174dc40f8e62dca05db1b34578de20fb6a06',
      address: '0x2f084edfc16573117b8cbFC01e1206CfAe5589Ac',
      topics: [Array],
      data: 'more characters,
      logIndex: 1,
      blockHash: '0x64902e4082e3f986f1fe2250e2d1466e1491402c700f62742984951a972d56da',
      args: [Array],
      decode: [Function (anonymous)],
      event: 'TransferBatch',
      eventSignature: 'TransferBatch(address,address,address,uint256[],uint256[])',
      removeListener: [Function (anonymous)],
      getBlock: [Function (anonymous)],
      getTransaction: [Function (anonymous)],
      getTransactionReceipt: [Function (anonymous)]
    },
    {
      transactionIndex: 2,
      blockNumber: 8234066,
      transactionHash: '0x78e47fed51814063822e86d1aeac174dc40f8e62dca05db1b34578de20fb6a06',
      address: '0x2f084edfc16573117b8cbFC01e1206CfAe5589Ac',
      topics: [Array],
      data: '0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001fa000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002fa000000000000000000000000000000000000000000000000000000000000003b000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000003d000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000003fa000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000004d000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000004fa000000000000000000000000000000000000000000000000000000000000005b000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000005d000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000005fa000000000000000000000000000000000000000000000000000000000000006b000000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000006d000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000006fa000000000000000000000000000000000000000000000000000000000000007amore characters,
      logIndex: 2,
      blockHash: '0x64902e4082e3f986f1fe2250e2d1466e1491402c700f62742984951a972d56da',
      args: [Array],
      decode: [Function (anonymous)],
      event: 'TransferBatch',
      eventSignature: 'TransferBatch(address,address,address,uint256[],uint256[])',
      removeListener: [Function (anonymous)],
      getBlock: [Function (anonymous)],
      getTransaction: [Function (anonymous)],
      getTransactionReceipt: [Function (anonymous)]
    }
  ]
}
philippadrian@ph101pp contract % npm run deploy-mainnet  

> deploy-mainnet
> npm run test && npx hardhat run scripts/deploy.ts --network mainnet


> test
> npx hardhat test

ITERATIONS 100


  Gas costs ERC1155 vs ERC1155MintRange vs ERC1155MintRangeUpdateable vs Ph101ppDailyPhoto
    - updateInitialHolders() vs transferBatch()
    - mint() transfer() burn()
    - mintBatch() transferBatch() burnBatch()
    - pause() unpause()
    - mintRange() transfer() transfer()

  ERC1155MintRange
    getRangeMintInput
      ✔ Should return correctly formatted input params (3616ms)
      ✔ Should return correctly formatted input params for 0 tokens (50ms)
      ✔ Should return correctly formatted input params with consecutive ids when called after mintRange (577ms)
      ✔ Should correctly skip manually minted ids (_mint | _mintBatch) (594ms)
    mintRange
      ✔ Should mint 100 nfts to 4 initial holders and emit 4 TransferBatch events (3903ms)
      ✔ should correcly allocate dynamic balances when calling mintRange (933ms)
      ✔ should be possible to increase supply of dynamically minted tokens (_mintRange) via _mint|_mintBatch (221ms)
      ✔ mintRangeSafe Should fail when a token was minted since getMintRangeInput was called (94ms)
      ✔ mintRangeSafe Should fail when a batch of tokens was minted since getMintRangeInput was called (110ms)
      ✔ mintRangeSafe should fail when initial holders were updated since getMintRangeInput was called (85ms)
      ✔ mintRangeSafe should fail when another mintRange was executed since getMintRangeInput was called (116ms)
    safeTransfer(Batch)
      ✔ should transfer existing tokens that are minted with mintRange (495ms)
      ✔ should batch transfer existing tokens that are minted with mintRange (536ms)
    initialHolders
      ✔ Should fail to set initial holders to address(0) or same address (154ms)
      ✔ Should correctly update initial holders with setInitialHolders (294ms)
      ✔ Should return current initial holders when called with tokenID > number tokens minted (287ms)
      ✔ Should return initial holders for tokenId (also after they where updated) (745ms)
      ✔ Should not be possible to set initial holders that where token holders (215ms)
    totalSupply
      ✔ should correcly track totalSupply for dynamic balances minted with mintRange (473ms)
      ✔ should correcly track totalSupply for manually mints with _mint & _mintBatch  (498ms)
      ✔ should correcly track totalSupply when supply is added to dynamic balances  (990ms)
      ✔ should correcly track totalSupply when supply is removed / burned  (493ms)

  ERC1155MintRangePausable
    getRangeMintInput
      ✔ Should return correctly formatted input params (161ms)
      ✔ Should return correctly formatted input params for 0 tokens
      ✔ Should return correctly formatted input params with consecutive ids when called after mintRange (339ms)
      ✔ Should correctly skip manually minted ids (_mint | _mintBatch) (479ms)
    mintRange
      ✔ Should mint 100 nfts to 4 initial holders and emit 4 TransferBatch events (3889ms)
      ✔ should correcly allocate dynamic balances when calling mintRange (900ms)
      ✔ should be possible to increase supply of dynamically minted tokens (_mintRange) via _mint|_mintBatch (184ms)
      ✔ mintRangeSafe Should fail when a token was minted since getMintRangeInput was called (76ms)
      ✔ mintRangeSafe Should fail when a batch of tokens was minted since getMintRangeInput was called (91ms)
      ✔ mintRangeSafe should fail when initial holders were updated since getMintRangeInput was called (79ms)
      ✔ mintRangeSafe should fail when another mintRange was executed since getMintRangeInput was called (139ms)
    safeTransfer(Batch)
      ✔ should transfer existing tokens that are minted with mintRange (486ms)
      ✔ should batch transfer existing tokens that are minted with mintRange (452ms)
    initialHolders
      ✔ Should fail to set initial holders to address(0) or same address
      ✔ Should correctly update initial holders with setInitialHolders (156ms)
      ✔ Should return current initial holders when called with tokenID > number tokens minted (228ms)
      ✔ Should return initial holders for tokenId (also after they where updated) (485ms)
      ✔ Should not be possible to set initial holders that where token holders (173ms)
    totalSupply
      ✔ should correcly track totalSupply for dynamic balances minted with mintRange (458ms)
      ✔ should correcly track totalSupply for manually mints with _mint & _mintBatch  (297ms)
      ✔ should correcly track totalSupply when supply is added to dynamic balances  (974ms)
      ✔ should correcly track totalSupply when supply is removed / burned  (513ms)
    Pausable (when paused)
      ✔ should fail to mintRange() (133ms)
      ✔ should fail to setInitialHolders()
      ✔ should fail to mint()
      ✔ should fail to mintBatch()
      ✔ should fail to burn()
      ✔ should fail to transfer() (42ms)
      ✔ should fail to transferBatch() (187ms)

  TestERC1155MintRangeUpdateable
    getRangeMintInput
      ✔ Should return correctly formatted input params (196ms)
      ✔ Should return correctly formatted input params for 0 tokens
      ✔ Should return correctly formatted input params with consecutive ids when called after mintRange (375ms)
      ✔ Should correctly skip manually minted ids (_mint | _mintBatch) (490ms)
    mintRange
      ✔ Should mint 100 nfts to 4 initial holders and emit 4 TransferBatch events (4404ms)
      ✔ should correcly allocate dynamic balances when calling mintRange (1028ms)
      ✔ should be possible to increase supply of dynamically minted tokens (_mintRange) via _mint|_mintBatch (183ms)
      ✔ mintRangeSafe Should fail when a token was minted since getMintRangeInput was called (95ms)
      ✔ mintRangeSafe Should fail when a batch of tokens was minted since getMintRangeInput was called (86ms)
      ✔ mintRangeSafe should fail when initial holders were updated since getMintRangeInput was called (79ms)
      ✔ mintRangeSafe should fail when another mintRange was executed since getMintRangeInput was called (122ms)
    safeTransfer(Batch)
      ✔ should transfer existing tokens that are minted with mintRange (536ms)
      ✔ should batch transfer existing tokens that are minted with mintRange (506ms)
    initialHolders
      ✔ Should fail to set initial holders to address(0) or same address
      ✔ Should correctly update initial holders with setInitialHolders (178ms)
      ✔ Should return current initial holders when called with tokenID > number tokens minted (255ms)
      ✔ Should return initial holders for tokenId (also after they where updated) (556ms)
      ✔ Should not be possible to set initial holders that where token holders (201ms)
    totalSupply
      ✔ should correcly track totalSupply for dynamic balances minted with mintRange (549ms)
      ✔ should correcly track totalSupply for manually mints with _mint & _mintBatch  (312ms)
      ✔ should correcly track totalSupply when supply is added to dynamic balances  (1098ms)
      ✔ should correcly track totalSupply when supply is removed / burned  (749ms)
    Pausable (when paused)
      ✔ should fail to mintRange() (123ms)
      ✔ should fail to setInitialHolders()
      ✔ should fail to mint()
      ✔ should fail to mintBatch()
      ✔ should fail to burn()
      ✔ should fail to transfer() (40ms)
      ✔ should fail to transferBatch()
    updateInitialHoldersInputSafe / _getUpdateInitialHoldersInputSafe / verifyUpdateInitialHoldersInput
      ✔ should fail when getting bad input or not paused (7636ms)
      ✔ should skip manuallyMinted tokens && reinitialize initializedBalances (585ms)
      ✔ should correcly update initialHolders of a simple range (468ms)
      ✔ should correcly update initialHolders across multiple ranges (579ms)
      ✔ should fail to create update initialHolders input when new holder is address(0) (373ms)
    updateInitialHolders non-safe must not affect any minted / transferred tokens when updating initialHolders
      ✔ should successfully change holders in various ways and revert everything (12578ms)
      ✔ should fail when getting bad input or not paused (4657ms)
      ✔ should not be possible to affect balances or supply when updating initialHolders (6579ms)
      ✔ should correctly transfer initialHolders when there were transfers (930ms)
      ✔ should correctly transfer initialHolders when there are manual mints without affecting supply (931ms)
      ✔ should correctly swap two initialHolders (5174ms)
    Lock initial holders
      ✔ should fail to lock initial holders of unminted tokens or if tokens are already locked (347ms)
      ✔ should fail to lock initial holders when paused (136ms)
      ✔ should fail to create update initialHolders input of locked range (858ms)

  Ph101ppDailyPhoto
    Interface
      ✔ It should support interfaces ERC1155, ERC2981, ERC165 (244ms)
    URI storing / updating
      ✔ Should set the correct mutableUri and immutableUri during deploy
      ✔ Should correcly update mutableUri via setProxyBaseUri()
      ✔ Should correcly update immutableUri via setPermanentBaseUriUpTo() and permanentBaseUriRanges + uriHistory to reflect this. (1808ms)
      ✔ Should require new permanentUri via setPermanentBaseUriUpTo() to be valid for more tokenIds than the last one and less than last minted one. (1896ms)
    tokenID <> date conversion
      ✔ should correcty convert date string <> token ID (138ms)
      ✔ should fail to translate date before Sept 1, 2022 to tokenId
      ✔ should fail to translate date if invalid date (incl leap years)
    URI() for tokenIDs
      ✔ should return correct url for unminted tokenId:1 
      ✔ should return correct url for tokenId:0 (CLAIM) 
      ✔ should return immutable url for all minted nfts  (1714ms)
      ✔ should return mutable url for minted nfts after _uriValidUptoTokenId (1253ms)
    Periods & uriHistory
      ✔ should return correctly set Init period
      ✔ Should correctly set Periods with setPeriod (181ms)
    Initial Supply 
      ✔ should fail to set max initial supply when paused
      ✔ should fail to set initial supply with incorrect inputs
      - Should invalidate mintRangeInput when maxInitialSupply is set
      ✔ Should correctly update initial supply via setInitialSupply (299ms)
      ✔ Should correctly update initial supply with setInitialHolders 2 (205ms)
      ✔ Should distribute tokens evenly within min/max supply range (15063ms)
    Mint Photos
      ✔ should fail to mint <= 0 tokens (100ms)
      ✔ should mint 1 vault and up to max supply to treasury  (21978ms)
    Claim tokens
      ✔ should mint 10 claim tokens to treasury wallet 
      ✔ should mint claim tokens to any wallet  (80ms)
      ✔ should claim mints from treasury and burn claims when redeemClaims is called (442ms)
      ✔ should claim mint from treasury and burn claim when redeemClaim is called (369ms)
    Update initial holders / getPh101ppDailyPhotoUpdateInitialHoldersInput
      ✔ should correcly update vault address only (993ms)
      ✔ should correcly update treasury address only (1175ms)
      ✔ should correcly swap treasury and vault addresses (1780ms)
      ✔ should fail to updated initialHolders if isInitialHoldersRangeUpdatePermanentlyDisabled (809ms)
    ERC2981 Token Royalties
      ✔ should set default royalties during deploy
      ✔ should be able to set new default royalties (42ms)
      ✔ should be able to set and reset royalties for single token (61ms)
    Ownable / Ownable
      ✔ should fail to execute access guarded functions without role (169ms)
      ✔ should execute access guarded functions with special role (209ms)
      ✔ should fail execute non-view functions when paused (165ms)
      ✔ should be possible to update owner via setOwner
    Operator Filter Registry
      ✔ should correctly register contract with Operator Filter Registry and subscribe to opensea
      ✔ should prevent filtered operator to transfer tokens (+ disable / disablePermanently) (397ms)
    Transfer Listener
      ✔ should correcly set transfer listener via setTransferListenerAddress
      ✔ should fail to set transfer listener via setTransferListenerAddress when frozen
      ✔ should emit Ph101ppDailyPhotoTransferReceived from Listener on transfer (332ms)

  Ph101ppDailyPhotoUtils
    ✔ Should correcly parse date test cases  (155ms)


  136 passing (2m)
  6 pending

deployed: Ph101ppDailyPhoto 0x986A4010D6dF5754f66F72764487070615CBDE9A
philippadrian@ph101pp contract % 